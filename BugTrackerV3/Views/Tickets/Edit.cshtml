@model BugTrackerV3.Models.Ticket
@using Microsoft.AspNet.Identity;

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Ticket</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.Project.Id)
        @*<div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>*@
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TicketTypeId, "Ticket Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TicketTypeId", null, String.Empty, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TicketTypeId, "", new { @class = "text-danger" })
            </div>
        </div>



        @*This section should NOT be editable by submitters. Just display for their information.*@
        @if (Model.OwnerUserId == User.Identity.GetUserId() && !User.IsInRole("Admin"))
        {
            <div class="form-group">
                @Html.HiddenFor(model => model.Created)
                @Html.LabelFor(model => model.Created, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.Created, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.HiddenFor(model => model.Updated)
                @Html.LabelFor(model => model.Updated, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.Updated, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Updated, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.HiddenFor(model => model.Project.Name)
                @Html.HiddenFor(model => model.ProjectId)
                @Html.LabelFor(model => model.Project.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.Project.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @*@Html.DropDownList("ProjectId", null, htmlAttributes: new { @class = "form-control" })*@
                    @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.HiddenFor(model => model.TicketStatusId)
                @Html.LabelFor(model => model.TicketStatusId, "Ticket Status", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.TicketStatus.Name, new { @class = "control-label col-md-2" })
                    @*@Html.DropDownList("TicketStatusId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TicketStatusId, "", new { @class = "text-danger" })*@
                </div>
            </div>

            <div class="form-group">
                @Html.HiddenFor(model => model.TicketPriorityId)
                @Html.LabelFor(model => model.TicketPriorityId, "Ticket Priority", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.TicketPriority.Name, new { @class = "control-label col-md-2" })
                    @*@Html.DropDownList("TicketPriorityId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TicketPriorityId, "", new { @class = "text-danger" })*@
                </div>
            </div>


            <div class="form-group">
                @Html.HiddenFor(model => model.OwnerUserId)
                @Html.LabelFor(model => model.OwnerUser, "Owner of Ticket", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.OwnerUser.DisplayName, new { @class = "control-label col-md-2" })
                    @*@Html.DropDownList("OwnerUserId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OwnerUserId, "", new { @class = "text-danger" })*@
                </div>
            </div>
            <div class="form-group">
                @Html.HiddenFor(model => model.AssignedToUserId)
                @*@Html.LabelFor(model => model.AssignedToUserId, "AssignedToUserId", htmlAttributes: new { @class = "control-label col-md-2" })*@
                @Html.DisplayNameFor(model => model.AssignedToUserId)

                @*Ensure assigned developer can't change themselves, unless they're also an Admin*@
                @if ((Model.AssignedToUserId == User.Identity.GetUserId() || Model.OwnerUserId == User.Identity.GetUserId()) && !User.IsInRole("Admin"))
                {
                    if (Model.AssignedToUserId != null)
                    {
                        <div class="col-md-10">
                            @Model.AssignedToUser.DisplayName (@Model.AssignedToUser.Email) is the developer assigned to this ticket
                        </div>
                    }
                    else
                    {
                        <div class="col-md-10">
                            This Ticket has not been assigned to a developer yet.
                        </div>
                    }

                }
                else
                {
                    <div class="col-md-10">
                        @Html.DropDownList("AssignedToUserId", null, String.Empty, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AssignedToUserId, "", new { @class = "text-danger" })
                    </div>
                }
            </div>


        }



        @*This section should be editable by admins, PM or developers*@
        @if ((User.Identity.GetUserId() == Model.Project.PMID) || (User.Identity.GetUserId() == Model.AssignedToUserId) || (User.IsInRole("Admin")))
        {

            <div class="form-group">
                @Html.LabelFor(model => model.Created, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.Created, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Updated, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.Updated, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Updated, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Project.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @*@Html.DisplayFor(model => model.Project.Name, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.DropDownList("ProjectId", null, String.Empty, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TicketStatusId, "Ticket Status", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("TicketStatusId", null, String.Empty, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TicketStatusId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TicketPriorityId, "Ticket Priority", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("TicketPriorityId", null, String.Empty, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TicketPriorityId, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.OwnerUserId, "Owner of This Ticket", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("OwnerUserId", null, String.Empty, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.OwnerUserId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.AssignedToUserId, "Developer Assigned To", htmlAttributes: new { @class = "control-label col-md-2" })
                @*Ensure assigned developer can't change themselves, unless they're also an Admin*@
                @if ((Model.AssignedToUserId == User.Identity.GetUserId() || Model.OwnerUserId == User.Identity.GetUserId()) && !User.IsInRole("Admin"))
                {
                    if (Model.AssignedToUserId != null)
                    {
                        <div class="col-md-10">
                            @Model.AssignedToUserId is the developer assigned to this ticket
                        </div>
                    }
                    else
                    {
                        <div class="col-md-10">
                            This Ticket has not been assigned to a developer yet.
                        </div>
                    }

                }
                else
                {
                    <div class="col-md-10">
                        @Html.DropDownList("AssignedToUserId", null, String.Empty, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AssignedToUserId, "", new { @class = "text-danger" })
                    </div>
                }
            </div>
        }





        @*Save button for the form goes here*@
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
